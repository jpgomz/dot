#!/usr/bin/env bash

# Instalar dependencias
[ -f /etc/debian_version ] && sudo apt-get install -y pass gpg git
[ -f /etc/redhat-release ] && sudo dnf install -y pass gpg git
[ -f /etc/arch-release ] && sudo pacman -S --noconfirm pass gnupg git

# Clonar repositorio password-store
PASS_REPO="git@github.com:jpgomz/pwd-store.git"
PASS_DIR="$HOME/.password-store"

if [ ! -d "$PASS_DIR" ]; then
    echo "Clonando repositorio de contraseñas..."
    git clone "$PASS_REPO" "$PASS_DIR"
else
    echo "El directorio .password-store ya existe. Haciendo backup..."
    mv "$PASS_DIR" "$HOME/.password-store.bak.$(date +%s)"
    git clone "$PASS_REPO" "$PASS_DIR"
fi

# Verificar/actualizar .gpg-id
GPG_ID_FILE="$PASS_DIR/.gpg-id"

# Si el archivo existe y tiene contenido válido
if [ -f "$GPG_ID_FILE" ] && grep -qE '^[A-F0-9]{40}$' "$GPG_ID_FILE"; then
    echo "Usando fingerprint existente de .gpg-id"
    GPG_ID=$(head -n1 "$GPG_ID_FILE")
else
    # Obtener fingerprint completo (40 caracteres)
    GPG_ID=$(gpg --list-secret-keys --with-colons --fingerprint \
        | awk -F: '/^fpr:/ { print $10 }' \
        | grep -E '^[A-F0-9]{40}$' | head -n1)

    if [ -z "$GPG_ID" ]; then
        echo "Error: No se encontraron claves GPG válidas"
        exit 1
    fi

    echo "$GPG_ID" > "$GPG_ID_FILE"
    echo "Actualizado .gpg-id con fingerprint completo"
fi

# Configurar Git
cd "$PASS_DIR"
if ! git remote -v | grep -q origin; then
    git remote add origin "$PASS_REPO"
fi

# Sincronizar
echo "➠ Sincronizando contraseñas..."
git fetch origin
git reset --hard origin/$(git symbolic-ref --short HEAD)
cd -

echo "Configuración completada!"
echo "   Accede a tus contraseñas con: pass show <ruta>"